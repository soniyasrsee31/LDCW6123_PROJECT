#include <iostream>
#include <vector>
#include <string>
#include <cstdlib>
#include <ctime>
#include <random>
#include <algorithm>
#include <set>

// Structure to hold a single lesson item
struct LessonItem {
    std::string english;
    std::string malay;
};

// Function to get a random lesson item
LessonItem getRandomLesson(const std::vector<LessonItem>& lessons) {
    if (lessons.empty()) {
        return {"", ""};
    }
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> dis(0, lessons.size() - 1);
    return lessons[dis(gen)];
}

// Function to run a quiz
void runQuiz(const std::vector<LessonItem>& lessons) {
    int score = 0;
    const int num_questions = 5;

    std::cout << "\n--- Kuiz (Quiz) Time! ---\n";
    std::cout << "Translate the following English words/phrases to Bahasa Melayu.\n";
    for (int i = 0; i < num_questions; ++i) {
        LessonItem current_lesson = getRandomLesson(lessons);
        std::string user_answer;

        std::cout << "\nQuestion " << i + 1 << ": What is \"" << current_lesson.english << "\" in Bahasa Melayu? ";
        std::getline(std::cin, user_answer);

        if (user_answer == current_lesson.malay) {
            std::cout << "✅ Correct! Bagus! (Good!)\n";
            score++;
        } else {
            std::cout << "❌ Incorrect. The correct answer is \"" << current_lesson.malay << "\". Cuba lagi! (Try again!)\n";
        }
    }

    std::cout << "\n--- Kuiz Selesai (Quiz Finished) ---\n";
    std::cout << "You got " << score << " out of " << num_questions << " correct.\n";
    std::cout << "Keep practicing!\n";
}

// Function to teach new vocabulary
void teachVocabulary(const std::vector<LessonItem>& lessons) {
    std::cout << "\n--- Pelajaran Kosa Kata (Vocabulary Lesson) ---\n";
    std::cout << "Here are some basic words and phrases:\n";
    for (const auto& item : lessons) {
        std::cout << "- " << item.english << " -> " << item.malay << "\n";
    }
}

// New function for practice mode
void practiceMode(const std::vector<LessonItem>& lessons) {
    std::cout << "\n--- Mod Latihan (Practice Mode) ---\n";
    std::cout << "Translate words one-by-one. Type 'exit' to return to the main menu.\n";
    while (true) {
        LessonItem current_item = getRandomLesson(lessons);
        std::string user_input;
        std::cout << "\nTranslate \"" << current_item.english << "\": ";
        std::getline(std::cin, user_input);
        if (user_input == "exit") {
            break;
        }

        if (user_input == current_item.malay) {
            std::cout << "✅ Correct! Bagus! (Good!)\n";
        } else {
            std::cout << "❌ Incorrect. The correct answer is \"" << current_item.malay << "\". Try again!\n";
        }
    }
}

// New function for the conversation section
void showConversation() {
    std::cout << "\n--- Contoh Perbualan (Conversation Example) ---\n";
    std::cout << "Berikut adalah perbualan ringkas dalam Bahasa Melayu:\n";
    std::cout << "\nPerson A: Helo! Apa khabar?\n";
    std::cout << "          (Hello! How are you?)\n";
    std::cout << "Person B: Khabar baik. Terima kasih. Awak?\n";
    std::cout << "          (I'm fine. Thank you. And you?)\n";
    std::cout << "Person A: Saya pun khabar baik. Awak nak minum air?\n";
    std::cout << "          (I'm fine too. Do you want to drink water?)\n";
    std::cout << "Person B: Ya, tolong. Saya haus.\n";
    std::cout << "          (Yes, please. I am thirsty.)\n";
}

// New function for the Malay to English quiz
void runQuizMalayToEnglish(const std::vector<LessonItem>& lessons) {
    int score = 0;
    const int num_questions = 5;

    std::cout << "\n--- Kuiz Bahasa Melayu ke Bahasa Inggeris ---\n";
    std::cout << "Terjemah perkataan/frasa Bahasa Melayu berikut ke Bahasa Inggeris.\n";
    for (int i = 0; i < num_questions; ++i) {
        LessonItem current_lesson = getRandomLesson(lessons);
        std::string user_answer;

        std::cout << "\nSoalan " << i + 1 << ": Apakah \"" << current_lesson.malay << "\" dalam Bahasa Inggeris? ";
        std::getline(std::cin, user_answer);

        if (user_answer == current_lesson.english) {
            std::cout << "✅ Correct! Bagus! (Good!)\n";
            score++;
        } else {
            std::cout << "❌ Incorrect. The correct answer is \"" << current_lesson.english << "\". Cuba lagi! (Try again!)\n";
        }
    }

    std::cout << "\n--- Kuiz Selesai ---\n";
    std::cout << "Anda mendapat " << score << " daripada " << num_questions << " jawapan yang betul.\n";
    std::cout << "Terus berlatih!\n";
}

// New function for the multiple-choice quiz
void runMultipleChoiceQuiz(const std::vector<LessonItem>& lessons) {
    int score = 0;
    const int num_questions = 5;

    std::cout << "\n--- Kuiz Pelbagai Pilihan (Multiple Choice Quiz) ---\n";
    std::cout << "Pilih jawapan yang betul (A, B, C, or D).\n";

    std::random_device rd;
    std::mt19937 gen(rd());

    for (int i = 0; i < num_questions; ++i) {
        LessonItem correct_item = getRandomLesson(lessons);
        std::string correct_answer = correct_item.malay;

        std::vector<std::string> choices;
        choices.push_back(correct_answer);

        std::set<std::string> used_answers;
        used_answers.insert(correct_answer);

        while (choices.size() < 4) {
            LessonItem wrong_item = getRandomLesson(lessons);
            if (used_answers.find(wrong_item.malay) == used_answers.end()) {
                choices.push_back(wrong_item.malay);
                used_answers.insert(wrong_item.malay);
            }
        }

        std::shuffle(choices.begin(), choices.end(), gen);

        char correct_choice_char = 'A';
        for (int j = 0; j < choices.size(); ++j) {
            if (choices[j] == correct_answer) {
                correct_choice_char = 'A' + j;
                break;
            }
        }

        std::cout << "\nQuestion " << i + 1 << ": What is \"" << correct_item.english << "\" in Bahasa Melayu?\n";
        for (int j = 0; j < choices.size(); ++j) {
            std::cout << "  " << (char)('A' + j) << ". " << choices[j] << "\n";
        }

        std::string user_choice_str;
        std::cout << "Enter your choice: ";
        std::getline(std::cin, user_choice_str);

        if (user_choice_str.length() == 1) {
            char user_choice = std::toupper(user_choice_str[0]);
            if (user_choice == correct_choice_char) {
                std::cout << "✅ Correct! Bagus! (Good!)\n";
                score++;
            } else {
                std::cout << "❌ Incorrect. The correct answer is " << correct_choice_char << ": \"" << correct_answer << "\". Cuba lagi! (Try again!)\n";
            }
        } else {
            std::cout << "Pilihan tidak sah (Invalid choice). The correct answer is " << correct_choice_char << ": \"" << correct_answer << "\".\n";
        }
    }

    std::cout << "\n--- Kuiz Selesai ---\n";
    std::cout << "You got " << score << " out of " << num_questions << " correct.\n";
    std::cout << "Keep practicing!\n";
}

// Main function
int main() {
    // Seed for random number generation
    srand(static_cast<unsigned int>(time(0)));
    // Our main vocabulary list
    std::vector<LessonItem> vocabulary = {
        {"Hello", "Helo"},
        {"Thank you", "Terima kasih"},
        {"Yes", "Ya"},
        {"No", "Tidak"},
        {"Please", "Tolong"},
        {"I", "Saya"},
        {"You", "Awak"},
        {"Eat", "Makan"},
        {"Drink", "Minum"},
        {"Water", "Air"},
        {"Food", "Makanan"},
        {"Good morning", "Selamat pagi"},
        {"Good night", "Selamat malam"},
        {"How are you?", "Apa khabar?"},
        {"I'm fine", "Khabar baik"}
    };
    std::cout << "Selamat datang ke program Bahasa Melayu! (Welcome to the Bahasa Melayu program!)\n";
    std::cout << "Let's start learning some basic words and phrases.\n";

    bool running = true;
    std::string choice;
    while (running) {
        std::cout << "\n--- Main Menu ---\n";
        std::cout << "1. Pelajaran (Lesson)\n";
        std::cout << "2. Kuiz (English to Malay)\n";
        std::cout << "3. Kuiz (Malay to English)\n";
        std::cout << "4. Kuiz Pelbagai Pilihan (Multiple Choice Quiz)\n";
        std::cout << "5. Latihan (Practice)\n";
        std::cout << "6. Perbualan (Conversation)\n";
        std::cout << "7. Keluar (Exit)\n";
        std::cout << "Enter your choice: ";
        std::getline(std::cin, choice);

        if (choice == "1") {
            teachVocabulary(vocabulary);
        } else if (choice == "2") {
            runQuiz(vocabulary);
        } else if (choice == "3") {
            runQuizMalayToEnglish(vocabulary);
        } else if (choice == "4") {
            runMultipleChoiceQuiz(vocabulary);
        } else if (choice == "5") {
            practiceMode(vocabulary);
        } else if (choice == "6") {
            showConversation();
        } else if (choice == "7") {
            running = false;
        } else {
            std::cout << "Pilihan tidak sah (Invalid choice). Please try again.\n";
        }
    }

    std::cout << "\nTerima kasih dan selamat jalan! (Thank you and goodbye!)\n";
    return 0;
}
